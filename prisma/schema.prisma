generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Rol {
  UAI
  UA
  UV
  UReg
  UTI
  UR
  UC
  UE
  ULL
  UEN
}

enum EstadoRegistro {
  SN_OK
  SCRAP_COSMETICO
  SCRAP_ELECTRONICO
  SCRAP_INFESTACION
  REPARACION
}

enum EstadoLote {
  EN_PROCESO
  PAUSADO
  COMPLETADO
  CANCELADO
}

enum FaseProceso {
  REGISTRO
  TEST_INICIAL
  COSMETICA
  LIBERACION_LIMPIEZA
  ENSAMBLE
  RETEST
  EMPAQUE
}

// Usuario del sistema
model User {
  id                Int               @id @default(autoincrement())
  nombre            String
  userName          String            @unique
  email             String            @unique
  password          String
  rol               Rol
  registros         Registro[]
  lotesSku          LoteSku[]         @relation("UserLotesSku")
  logs              Log[]
  modems            Modem[]
  transiciones      TransicionFase[]
  estadoTransiciones EstadoTransicion[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

// Catálogo de SKUs/Productos
model CatalogoSKU {
  id          Int       @id @default(autoincrement())
  nombre      String    @unique
  skuItem     String    @unique
  modems      Modem[]
  lotesSku    LoteSku[]
  loteEmpaques LoteEmpaque[]
}

// Modems/Dispositivos a procesar
model Modem {
  id            Int       @id @default(autoincrement())
  sn            String    @unique
  loteSkuId     Int
  loteSku       LoteSku   @relation(fields: [loteSkuId], references: [id])
  skuId         Int
  sku           CatalogoSKU @relation(fields: [skuId], references: [id])
  estadoActualId Int
  estadoActual  Estado    @relation(fields: [estadoActualId], references: [id])
  faseActual    FaseProceso
  registros     Registro[]
  responsableId Int
  responsable   User      @relation(fields: [responsableId], references: [id])
  transiciones  TransicionFase[]
  estadoHistorial EstadoTransicion[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  loteEmpaqueId Int?
  loteEmpaque   LoteEmpaque? @relation(fields: [loteEmpaqueId], references: [id])
}

// Registros de acciones realizadas
model Registro {
  id            Int             @id @default(autoincrement())
  sn            String
  fase          FaseProceso
  estado        EstadoRegistro
  motivoScrap   MotivoScrap?    @relation(fields: [motivoScrapId], references: [id])
  motivoScrapId Int?
  reparacion    String?
  userId        Int
  user          User            @relation(fields: [userId], references: [id])
  loteSkuId     Int
  loteSku       LoteSku         @relation(fields: [loteSkuId], references: [id])
  modemId       Int
  modem         Modem           @relation(fields: [modemId], references: [id])
  createdAt     DateTime        @default(now())

  @@index([userId])
  @@index([loteSkuId])
  @@index([modemId])
}

// Transiciones entre fases
model TransicionFase {
  id         Int          @id @default(autoincrement())
  modemId    Int
  modem      Modem        @relation(fields: [modemId], references: [id])
  faseDesde  FaseProceso?
  faseHacia  FaseProceso
  userId     Int
  user       User         @relation(fields: [userId], references: [id])
  createdAt  DateTime     @default(now())
}

// Motivos para scrap
model MotivoScrap {
  id        Int        @id @default(autoincrement())
  nombre    String     @unique
  registros Registro[]
}

// Log de actividades
model Log {
  id        Int      @id @default(autoincrement())
  accion    String
  entidad   String
  detalle   String?
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

//=== TABLAS PARA MÁQUINA DE ESTADOS ===//

model Estado {
  id                Int                 @id @default(autoincrement())
  nombre            String              @unique
  descripcion       String?
  codigoInterno     String              @unique
  esFinal           Boolean             @default(false)
  requiereObservacion Boolean           @default(false)
  ordenDisplay      Int                 @default(0)
  color             String?
  modems            Modem[]
  transicionesDesde TransicionEstado[]  @relation("EstadoDesde")
  transicionesHacia TransicionEstado[]  @relation("EstadoHacia")
  historial         EstadoTransicion[]  @relation("EstadoAnterior")
  historialNuevo    EstadoTransicion[]  @relation("EstadoNuevo")
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model TransicionEstado {
  id                Int      @id @default(autoincrement())
  estadoDesdeId     Int
  estadoDesde       Estado   @relation("EstadoDesde", fields: [estadoDesdeId], references: [id])
  estadoHaciaId     Int
  estadoHacia       Estado   @relation("EstadoHacia", fields: [estadoHaciaId], references: [id])
  nombreEvento      String
  descripcion       String?
  requiereCantidad  Boolean  @default(false)
  requiereObservacion Boolean @default(false)
  rolesPermitidos   String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([estadoDesdeId, nombreEvento])
  @@index([estadoDesdeId])
  @@index([estadoHaciaId])
}

model EstadoTransicion {
  id             Int      @id @default(autoincrement())
  modemId        Int
  modem          Modem    @relation(fields: [modemId], references: [id])
  estadoAnteriorId Int?
  estadoAnterior Estado?  @relation("EstadoAnterior", fields: [estadoAnteriorId], references: [id])
  estadoNuevoId  Int
  estadoNuevo    Estado   @relation("EstadoNuevo", fields: [estadoNuevoId], references: [id])
  fase           FaseProceso
  evento         String
  cantidad       Int?
  observaciones  String?
  userId         Int
  user           User     @relation(fields: [userId], references: [id])
  createdAt      DateTime @default(now())

  @@index([modemId])
  @@index([estadoAnteriorId])
  @@index([estadoNuevoId])
  @@index([userId])
  @@index([fase])
}

model Carga {
  id        Int       @id @default(autoincrement())
  fecha     DateTime  @default(now())
  descripcion String?
  lotesSku  LoteSku[]
}

model LoteSku {
  id              Int          @id @default(autoincrement())
  numero          String       @unique
  cargaId         Int
  carga           Carga        @relation(fields: [cargaId], references: [id])
  skuId           Int
  sku             CatalogoSKU  @relation(fields: [skuId], references: [id])
  registroAbierto Boolean      @default(true)
  responsableId   Int
  responsable     User         @relation("UserLotesSku", fields: [responsableId], references: [id])
  modems          Modem[]
  registros       Registro[]
  estado          EstadoLote   @default(EN_PROCESO)
  prioridad       Int          @default(5)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  deletedAt       DateTime?
}

model LoteEmpaque {
  id        Int      @id @default(autoincrement())
  numero    String   @unique
  skuId     Int
  sku       CatalogoSKU @relation(fields: [skuId], references: [id])
  modems    Modem[]
  createdAt DateTime @default(now())
}